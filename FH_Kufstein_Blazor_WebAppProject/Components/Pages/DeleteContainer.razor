@inject ContainerDataClient containerDataClient
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="modal fade" id="@GetModalId(Container)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@Confirm">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ContainerData? Container { get; set; }

    private string title = string.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        title = $"Delete Container {Container?.Name}";
    }

    public static string GetModalId(ContainerData? container)
    {
        ArgumentNullException.ThrowIfNull(container);
        return $"deleteModal{container.Id}";
    }

    private void Confirm()
    {
        containerDataClient.DeleteContainerData(Container!.Id); // ! . is used to tell the compiler that Container is not null (Null Forgiving Operator)
        navigationManager.Refresh();
    }
}
